#!/usr/bin/env node

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –ú–ë
function getFileSizeInMB(filePath) {
  const stats = fs.statSync(filePath);
  return (stats.size / (1024 * 1024)).toFixed(2);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function analyzeImages() {
  const mockDir = path.join(__dirname, "src/assets/images/mock");

  if (!fs.existsSync(mockDir)) {
    console.log("–ü–∞–ø–∫–∞ mock –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    return;
  }

  const files = fs.readdirSync(mockDir);
  const imageFiles = files.filter((file) =>
    /\.(jpg|jpeg|png|webp)$/i.test(file)
  );

  console.log("üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:");
  console.log("========================");

  let totalSize = 0;

  imageFiles.forEach((file) => {
    const filePath = path.join(mockDir, file);
    const size = getFileSizeInMB(filePath);
    totalSize += parseFloat(size);

    console.log(`${file}: ${size} MB`);
  });

  console.log("========================");
  console.log(`–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${totalSize.toFixed(2)} MB`);
  console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: ${imageFiles.length}`);

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:");
  console.log("1. –°–æ–∂–º–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –º–µ–Ω–µ–µ 1MB");
  console.log("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç WebP –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è");
  console.log("3. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π");
  console.log("4. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CDN –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π");
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeImages();
