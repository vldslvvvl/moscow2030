import React, { useState, useEffect, useCallback, useRef } from "react";
import Header from "../components/Header";
import { usePageContext } from "../context/PageContext";
import WinModal from "../components/WinModal";
import LoseModal from "../components/LoseModal";
import IsometricBars from "../components/IsometricBars";
import "./Auction.css";

interface Participant {
  id: string;
  name: string;
  bid: number;
  isUser: boolean;
  isEliminated: boolean;
}

const Auction: React.FC = () => {
  const { auctionData } = usePageContext();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ (—Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ + 30%)
  const calculateInitialBudget = (): number => {
    if (!auctionData?.price) {
      return 25000000; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    return Math.round(auctionData.price * 1.3);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ (—Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞)
  const getInitialBid = (): number => {
    return auctionData?.price || 15000000; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  };

  const initialBudget = calculateInitialBudget();
  const initialBid = getInitialBid();

  // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const [currentRound, setCurrentRound] = useState(1);
  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0); // 0 = –∏–≥—Ä–æ–∫, 1 = –ê–ª–µ–∫—Å–µ–π, 2 = –û–ª–µ–≥
  const [gamePhase, setGamePhase] = useState<
    "playing" | "waiting_for_bot" | "finished"
  >("playing");
  const [showWinModal, setShowWinModal] = useState(false);
  const [showLoseModal, setShowLoseModal] = useState(false);

  // Ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
  const botTurnInProgress = useRef(false);

  // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±—ã–≤–∞–Ω–∏—è
  const [firstBotToEliminate] = useState<string>(() => {
    const randomValue = Math.random();
    const chosen = randomValue < 0.5 ? "alexey" : "oleg";
    console.log(
      `üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${randomValue.toFixed(3)}, –≤—ã–±—Ä–∞–Ω: ${chosen}`
    );
    return chosen;
  });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ä–∞—É–Ω–¥ –≤—ã–±—ã–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ
  const secondBotToEliminate =
    firstBotToEliminate === "alexey" ? "oleg" : "alexey";
  const [firstBotEliminatedRound, setFirstBotEliminatedRound] = useState<
    number | null
  >(null);

  const [participants, setParticipants] = useState<Participant[]>([
    {
      id: "user",
      name: "–í—ã",
      bid: initialBid,
      isUser: true,
      isEliminated: false,
    },
    {
      id: "alexey",
      name: "–ê–ª–µ–∫—Å–µ–π",
      bid: initialBid,
      isUser: false,
      isEliminated: false,
    },
    {
      id: "oleg",
      name: "–û–ª–µ–≥",
      bid: initialBid,
      isUser: false,
      isEliminated: false,
    },
  ]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserBudgetRemaining = (): number => {
    const userParticipant = participants.find((p) => p.isUser);
    if (!userParticipant) return initialBudget;
    return initialBudget - userParticipant.bid;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getCurrentBid = (): number => {
    const userParticipant = participants.find((p) => p.isUser);
    return userParticipant?.bid || initialBid;
  };

  // –ü–æ—Ä—è–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: 0 = –∏–≥—Ä–æ–∫, 1 = –ê–ª–µ–∫—Å–µ–π, 2 = –û–ª–µ–≥
  const playerOrder = [
    { id: "user", name: "–í—ã", isUser: true },
    { id: "alexey", name: "–ê–ª–µ–∫—Å–µ–π", isUser: false },
    { id: "oleg", name: "–û–ª–µ–≥", isUser: false },
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–∞–Ω—Å–∞ –≤—ã–±—ã–≤–∞–Ω–∏—è
  const getEliminationChance = (botId: string, round: number): number => {
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ (–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ)
    if (botId === firstBotToEliminate) {
      switch (round) {
        case 3:
          return 10;
        case 4:
          return 25;
        case 5:
          return 50;
        case 6:
          return 85;
        case 7:
          return 100;
        default:
          return 0; // –í —Ä–∞—É–Ω–¥–∞—Ö 1-2 –∏ –ø–æ—Å–ª–µ 7 - –Ω–µ—Ç —à–∞–Ω—Å–∞
      }
    }

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –≤—ã–±—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 2 —Ä–∞—É–Ω–¥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ)
    if (botId === secondBotToEliminate) {
      // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –±–æ—Ç –µ—â–µ –Ω–µ –≤—ã–±—ã–ª, –≤—Ç–æ—Ä–æ–π –Ω–µ –º–æ–∂–µ—Ç –≤—ã–±—ã—Ç—å
      if (firstBotEliminatedRound === null) return 0;

      // –í—Ç–æ—Ä–æ–π –±–æ—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –≤—ã–±—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 2 —Ä–∞—É–Ω–¥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ
      const minimumRoundForSecond = firstBotEliminatedRound + 2;
      if (round < minimumRoundForSecond) return 0;

      // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —à–∞–Ω—Å—ã –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
      const roundsAfterMinimum = round - minimumRoundForSecond;
      switch (roundsAfterMinimum) {
        case 0:
          return 20; // –ü–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∞—É–Ω–¥ (—á–µ—Ä–µ–∑ 2 —Ä–∞—É–Ω–¥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ)
        case 1:
          return 40; // +1 —Ä–∞—É–Ω–¥
        case 2:
          return 60; // +2 —Ä–∞—É–Ω–¥–∞
        case 3:
          return 80; // +3 —Ä–∞—É–Ω–¥–∞
        case 4:
          return 90; // +4 —Ä–∞—É–Ω–¥–∞
        case 5:
          return 95; // +5 —Ä–∞—É–Ω–¥–æ–≤
        default:
          // –î–ª—è —Ä–∞—É–Ω–¥–æ–≤ 6+ –∏–ª–∏ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç –¥–æ–ª—å—à–µ 10 —Ä–∞—É–Ω–¥–æ–≤
          return round >= 10 ? 100 : 98; // 100% —Ç–æ–ª—å–∫–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–∞—É–Ω–¥–µ
      }
    }

    return 0; // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ—Ç–æ–≤
  };

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ
  const getCurrentPlayer = () => {
    return playerOrder[currentPlayerIndex];
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
  const nextTurn = () => {
    const nextIndex = currentPlayerIndex + 1;

    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ - –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    if (nextIndex > 2) {
      setCurrentRound((prev) => prev + 1);
      setCurrentPlayerIndex(0);
      console.log(`üÜï –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ ${currentRound + 1}/10`);
    } else {
      // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É (–Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∏–∫–æ–≥–æ)
      setCurrentPlayerIndex(nextIndex);
    }
  };

  // –•–æ–¥ –±–æ—Ç–∞
  const makeBotMove = (botId: string, botName: string) => {
    if (botTurnInProgress.current) return;

    console.log(`ü§ñ –ù–∞—á–∏–Ω–∞–µ–º —Ö–æ–¥ –±–æ—Ç–∞: ${botName}`);
    botTurnInProgress.current = true;
    setGamePhase("waiting_for_bot");

    const delay = 1500 + Math.random() * 1000; // 1.5-2.5 —Å–µ–∫—É–Ω–¥—ã

    setTimeout(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—ã–ª –ª–∏ —É–∂–µ –±–æ—Ç —Ä–∞–Ω–µ–µ
      const currentParticipant = participants.find((p) => p.id === botId);
      if (currentParticipant?.isEliminated) {
        console.log(`üíÄ ${botName} —É–∂–µ –≤—ã–±—ã–ª - —Å—Ç–∞–≤–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
        console.log(`üéØ –ë–æ—Ç ${botName} –∑–∞–≤–µ—Ä—à–∏–ª —Ö–æ–¥ (–≤—ã–±—ã–≤—à–∏–π)`);
        botTurnInProgress.current = false;
        setGamePhase("playing");
        nextTurn();
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—ã–≤–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ —Ö–æ–¥–∞
      const eliminationChance = getEliminationChance(botId, currentRound);
      let botWillBeEliminated = false;

      if (eliminationChance > 0) {
        console.log(
          `üé≤ –®–∞–Ω—Å –≤—ã–±—ã–≤–∞–Ω–∏—è –¥–ª—è ${botName} –≤ —Ä–∞—É–Ω–¥–µ ${currentRound}: ${eliminationChance}%`
        );

        const roll = Math.random() * 100;
        console.log(
          `üéØ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –¥–ª—è ${botName}: ${roll.toFixed(
            1
          )} (–Ω—É–∂–Ω–æ < ${eliminationChance})`
        );

        if (roll < eliminationChance) {
          console.log(`‚ùå ${botName} –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã!`);
          botWillBeEliminated = true;

          // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—ã–±—ã–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
          if (
            botId === firstBotToEliminate &&
            firstBotEliminatedRound === null
          ) {
            setFirstBotEliminatedRound(currentRound);
            console.log(
              `üìù –ü–µ—Ä–≤—ã–π –±–æ—Ç (${botName}) –≤—ã–±—ã–ª –≤ —Ä–∞—É–Ω–¥–µ ${currentRound}`
            );
          }
        } else {
          console.log(`‚úÖ ${botName} –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–µ`);
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
      const bidIncrement = botWillBeEliminated
        ? 0
        : auctionData?.type === "parking"
        ? 50000
        : 100000;

      if (botWillBeEliminated) {
        console.log(`üíÄ ${botName} –≤—ã–±—ã–≤–∞–µ—Ç - —Å—Ç–∞–≤–∫–∞ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è`);
      } else {
        console.log(`üí∞ –ë–æ—Ç ${botName} –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É!`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      setParticipants((prev) => {
        return prev.map((participant) => {
          if (participant.id === botId) {
            const newBid = participant.bid + bidIncrement;

            if (botWillBeEliminated) {
              console.log(
                `‚úÖ ${botName}: —Å—Ç–∞–≤–∫–∞ ${participant.bid.toLocaleString(
                  "ru-RU"
                )} ‚ÇΩ (–≤—ã–±—ã–ª)`
              );
              return { ...participant, isEliminated: true };
            } else {
              console.log(
                `‚úÖ ${botName} —É–≤–µ–ª–∏—á–∏–ª —Å—Ç–∞–≤–∫—É: ${participant.bid.toLocaleString(
                  "ru-RU"
                )} ‚Üí ${newBid.toLocaleString("ru-RU")} ‚ÇΩ`
              );
              return { ...participant, bid: newBid };
            }
          }
          return participant;
        });
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
      if (botWillBeEliminated) {
        const remainingBots = participants.filter(
          (p) => !p.isUser && !p.isEliminated && p.id !== botId
        );
        if (remainingBots.length === 0) {
          console.log("üéâ –í—Å–µ –±–æ—Ç—ã –≤—ã–±—ã–ª–∏! –ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª!");
          botTurnInProgress.current = false;
          setGamePhase("finished");
          setShowWinModal(true);
          return;
        }
      }

      console.log(`üéØ –ë–æ—Ç ${botName} –∑–∞–≤–µ—Ä—à–∏–ª —Ö–æ–¥`);
      botTurnInProgress.current = false;
      setGamePhase("playing");
      nextTurn();
    }, delay);
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –±–æ—Ç–∞
  useEffect(() => {
    if (gamePhase !== "playing") return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ —Ä–∞—É–Ω–¥–∞–º
    if (currentRound > 10) {
      setGamePhase("finished");
      setShowWinModal(true);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const activeParticipants = participants.filter((p) => !p.isEliminated);
    if (activeParticipants.length <= 1) {
      console.log("üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫!");
      setGamePhase("finished");
      setShowWinModal(true);
      return;
    }

    const currentPlayer = getCurrentPlayer();
    const currentParticipant = participants.find(
      (p) => p.id === currentPlayer.id
    );

    console.log(
      `üéÆ –†–∞—É–Ω–¥ ${currentRound}/10, –•–æ–¥: ${currentPlayer.name} ${
        currentPlayer.isUser ? "üë§" : "ü§ñ"
      } ${currentParticipant?.isEliminated ? "‚ùå (–≤—ã–±—ã–ª)" : "‚úÖ"}`
    );

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞—Ö –¥–ª—è –≤—ã–±—ã–≤–∞–Ω–∏—è
    if (currentRound === 1 && currentPlayerIndex === 0) {
      console.log(
        `üéØ –ü–µ—Ä–≤—ã–π –±–æ—Ç –¥–ª—è –≤—ã–±—ã–≤–∞–Ω–∏—è: ${
          firstBotToEliminate === "alexey" ? "–ê–ª–µ–∫—Å–µ–π" : "–û–ª–µ–≥"
        }`
      );
      console.log(
        `üéØ –í—Ç–æ—Ä–æ–π –±–æ—Ç –¥–ª—è –≤—ã–±—ã–≤–∞–Ω–∏—è: ${
          secondBotToEliminate === "alexey" ? "–ê–ª–µ–∫—Å–µ–π" : "–û–ª–µ–≥"
        }`
      );
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—ã–≤–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
    if (
      firstBotEliminatedRound !== null &&
      currentRound === firstBotEliminatedRound + 1 &&
      currentPlayerIndex === 0
    ) {
      console.log(
        `üìÖ –ü–µ—Ä–≤—ã–π –±–æ—Ç –≤—ã–±—ã–ª –≤ —Ä–∞—É–Ω–¥–µ ${firstBotEliminatedRound}. –í—Ç–æ—Ä–æ–π –±–æ—Ç —Å–º–æ–∂–µ—Ç –≤—ã–±—ã–≤–∞—Ç—å —Å —Ä–∞—É–Ω–¥–∞ ${
          firstBotEliminatedRound + 2
        }`
      );
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (–∂–¥–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    if (currentPlayer.isUser) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ –≤—ã–±—ã–ª (–∏–≥—Ä–æ–∫ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–±—ã–≤–∞—Ç—å)
      if (currentParticipant?.isEliminated) {
        console.error(
          "‚ùå –û–®–ò–ë–ö–ê: –ò–≥—Ä–æ–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–±—ã–≤—à–∏–π! –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å."
        );
      }
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Ö–æ–¥ –±–æ—Ç–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–≤—ã–±—ã–≤—à–∏–µ –¥–µ–ª–∞—é—Ç "—Å—Ç–∞–≤–∫—É +0")
    if (!botTurnInProgress.current) {
      makeBotMove(currentPlayer.id, currentPlayer.name);
    }
  }, [
    currentPlayerIndex,
    currentRound,
    gamePhase,
    auctionData?.type,
    participants,
    firstBotToEliminate,
    secondBotToEliminate,
    firstBotEliminatedRound,
  ]);

  const handleIncreaseBid = useCallback(() => {
    if (gamePhase !== "playing") return;

    const currentPlayer = getCurrentPlayer();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
    if (!currentPlayer.isUser) {
      console.log("‚ùå –°–µ–π—á–∞—Å –Ω–µ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫—É");
      return;
    }

    const increaseAmount = auctionData?.type === "parking" ? 50000 : 100000;
    const currentUserBid = participants.find((p) => p.isUser)?.bid || 0;
    const remainingBudget = initialBudget - currentUserBid;

    if (remainingBudget < increaseAmount) {
      console.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏");
      return;
    }

    console.log(
      `üë§ –ò–≥—Ä–æ–∫ –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É: ${currentUserBid.toLocaleString("ru-RU")} ‚Üí ${(
        currentUserBid + increaseAmount
      ).toLocaleString("ru-RU")} ‚ÇΩ`
    );

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–≥—Ä–æ–∫–∞
    setParticipants((prev) =>
      prev.map((p) => (p.isUser ? { ...p, bid: p.bid + increaseAmount } : p))
    );

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
    console.log("‚úÖ –ò–≥—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ö–æ–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É");
    nextTurn();
  }, [
    gamePhase,
    auctionData?.type,
    initialBudget,
    participants,
    currentPlayerIndex,
  ]);

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
  const getCurrentPlayerInfo = () => {
    const currentPlayer = getCurrentPlayer();
    return {
      currentPlayer,
      isUserTurn: currentPlayer.isUser,
      activeParticipants: participants.filter((p) => !p.isEliminated),
    };
  };

  const formatCurrency = (amount: number): string => {
    return amount.toLocaleString("ru-RU");
  };

  // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã—Å–æ—Ç—ã –±–∞—Ä–æ–≤
  const maxBid = Math.max(...participants.map((p) => p.bid));
  const { currentPlayer, isUserTurn } = getCurrentPlayerInfo();

  return (
    <div className="auction-page">
      <Header />
      <main className="auction-content">
        <div className="auction-container">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—É–Ω–¥–µ –∏ —Ö–æ–¥–µ */}
          <div className="auction-timer">–†–∞—É–Ω–¥ {currentRound}/10</div>
          <div className="turn-info">
            {gamePhase === "finished"
              ? "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
              : gamePhase === "waiting_for_bot"
              ? `–•–æ–¥ –±–æ—Ç–∞...`
              : isUserTurn
              ? "–í–∞—à —Ö–æ–¥"
              : `–•–æ–¥: ${currentPlayer?.name || ""}`}
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ */}
          <div className="lot-info">
            <h1 className="lot-title">{auctionData?.title || "–ó–∞–≥—Ä—É–∑–∫–∞..."}</h1>
            <div className="lot-price">
              {auctionData
                ? `${auctionData.price.toLocaleString("ru-RU")} ‚ÇΩ`
                : "–ó–∞–≥—Ä—É–∑–∫–∞..."}
            </div>
          </div>

          {/* –ë—é–¥–∂–µ—Ç –∏ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ */}
          <div className="bid-info">
            <div className="budget-box">
              <label className="info-label">–û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞, ‚ÇΩ</label>
              <div className="info-value">
                {formatCurrency(getUserBudgetRemaining())}
              </div>
            </div>
            <div className="current-bid-box">
              <label className="info-label">–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞, ‚ÇΩ</label>
              <div className="info-value">
                {formatCurrency(getCurrentBid())}
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ */}
          <button
            className={`increase-bid-button ${
              !isUserTurn || gamePhase !== "playing" ? "disabled" : ""
            }`}
            onClick={handleIncreaseBid}
            disabled={!isUserTurn || gamePhase !== "playing"}
          >
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M12 19V5M5 12L12 5L19 12"
                stroke="white"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
            <span>
              –£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞{" "}
              {auctionData?.type === "parking" ? "50 000" : "100 000"}‚ÇΩ
            </span>
          </button>

          {/* –ò–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
          <div className="participants-3d-container">
            <IsometricBars participants={participants} maxBid={maxBid} />
          </div>
        </div>
      </main>
      <div className="background-shape"></div>
      <div className="background-shape-2"></div>
      <div className="background-shape-3"></div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <WinModal
        isOpen={showWinModal}
        onClose={() => setShowWinModal(false)}
        propertyTitle={auctionData?.title || ""}
        winningBid={participants.find((p) => p.isUser)?.bid || 0}
      />

      <LoseModal
        isOpen={showLoseModal}
        onClose={() => setShowLoseModal(false)}
        userBudget={getUserBudgetRemaining()}
      />
    </div>
  );
};

export default Auction;
